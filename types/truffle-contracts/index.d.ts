/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

/// <reference types="truffle-typings" />
import BN from "bn.js";

export interface BridgeContract extends Truffle.Contract<BridgeInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<BridgeInstance>;
}

export interface CandidateContract extends Truffle.Contract<CandidateInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<CandidateInstance>;
}

export interface DaoContract extends Truffle.Contract<DaoInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<DaoInstance>;
}

export interface ERC20MockContract extends Truffle.Contract<ERC20MockInstance> {
  "new"(
    initialAccount: string | BN,
    initialBalance: number | BN | string,
    meta?: Truffle.TransactionDetails
  ): Promise<ERC20MockInstance>;
}

export interface ICandidateContract
  extends Truffle.Contract<ICandidateInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ICandidateInstance>;
}

export interface IDaoContract extends Truffle.Contract<IDaoInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IDaoInstance>;
}

export interface IERC20Contract extends Truffle.Contract<IERC20Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IERC20Instance>;
}

export interface ILimitsContract extends Truffle.Contract<ILimitsInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ILimitsInstance>;
}

export interface IStatusContract extends Truffle.Contract<IStatusInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IStatusInstance>;
}

export interface ITransfersContract
  extends Truffle.Contract<ITransfersInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ITransfersInstance>;
}

export interface LimitsContract extends Truffle.Contract<LimitsInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<LimitsInstance>;
}

export interface MigrationsContract
  extends Truffle.Contract<MigrationsInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<MigrationsInstance>;
}

export interface StatusContract extends Truffle.Contract<StatusInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<StatusInstance>;
}

export interface TestDateTimeContract
  extends Truffle.Contract<TestDateTimeInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<TestDateTimeInstance>;
}

export interface TransfersContract extends Truffle.Contract<TransfersInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<TransfersInstance>;
}

export interface ValidatorsOperationsContract
  extends Truffle.Contract<ValidatorsOperationsInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ValidatorsOperationsInstance>;
}

export interface ValidatorsOperationsMockContract
  extends Truffle.Contract<ValidatorsOperationsMockInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ValidatorsOperationsMockInstance>;
}

export interface BridgeInstance extends Truffle.ContractInstance {
  allOperations(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  allOperationsCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  allOperationsIndicies(
    arg0: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  cancelAllPending: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  cancelPending: {
    (operation: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      operation: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      operation: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      operation: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  changeValidators: {
    (
      newValidators: (string | BN)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newValidators: (string | BN)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newValidators: (string | BN)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newValidators: (string | BN)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  changeValidatorsWithHowMany: {
    (
      newValidators: (string | BN)[],
      newHowManyValidatorsDecide: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newValidators: (string | BN)[],
      newHowManyValidatorsDecide: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newValidators: (string | BN)[],
      newHowManyValidatorsDecide: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newValidators: (string | BN)[],
      newHowManyValidatorsDecide: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  howManyValidatorsDecide(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  init: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  isExistValidator(
    wallet: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  validators(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  validatorsCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  validatorsGeneration(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  validatorsIndices(
    arg0: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  votesCountByOperation(
    arg0: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  votesMaskByOperation(
    arg0: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  initialize: {
    (
      _status: string | BN,
      _transfer: string | BN,
      _dao: string | BN,
      _candidate: string | BN,
      _limits: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _status: string | BN,
      _transfer: string | BN,
      _dao: string | BN,
      _candidate: string | BN,
      _limits: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _status: string | BN,
      _transfer: string | BN,
      _dao: string | BN,
      _candidate: string | BN,
      _limits: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _status: string | BN,
      _transfer: string | BN,
      _dao: string | BN,
      _candidate: string | BN,
      _limits: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setTransfer: {
    (
      amount: number | BN | string,
      guestAddress: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BN | string,
      guestAddress: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      guestAddress: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      guestAddress: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  revertTransfer: {
    (messageID: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      messageID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      messageID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      messageID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  approveTransfer: {
    (
      messageID: string | BN,
      spender: string | BN,
      guestAddress: string | BN,
      availableAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      messageID: string | BN,
      spender: string | BN,
      guestAddress: string | BN,
      availableAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      messageID: string | BN,
      spender: string | BN,
      guestAddress: string | BN,
      availableAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      messageID: string | BN,
      spender: string | BN,
      guestAddress: string | BN,
      availableAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  confirmTransfer: {
    (messageID: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      messageID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      messageID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      messageID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawTransfer: {
    (
      messageID: string | BN,
      sender: string | BN,
      recipient: string | BN,
      availableAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      messageID: string | BN,
      sender: string | BN,
      recipient: string | BN,
      availableAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      messageID: string | BN,
      sender: string | BN,
      recipient: string | BN,
      availableAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      messageID: string | BN,
      sender: string | BN,
      recipient: string | BN,
      availableAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  confirmWithdrawTransfer: {
    (messageID: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      messageID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      messageID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      messageID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  confirmCancelTransfer: {
    (messageID: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      messageID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      messageID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      messageID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  startBridge: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  resumeBridge: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  stopBridge: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  pauseBridge: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setPausedStatusForGuestAddress: {
    (sender: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setResumedStatusForGuestAddress: {
    (sender: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createProposal: {
    (
      parameters: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      parameters: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      parameters: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      parameters: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  approvedNewProposal: {
    (proposalID: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      proposalID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      proposalID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      proposalID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createCandidatesValidatorsProposal: {
    (hosts: (string | BN)[], txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      hosts: (string | BN)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      hosts: (string | BN)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      hosts: (string | BN)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  approveNewValidatorsList: {
    (proposalID: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      proposalID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      proposalID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      proposalID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addCandidate: {
    (
      host: string | BN,
      guest: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      host: string | BN,
      guest: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      host: string | BN,
      guest: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      host: string | BN,
      guest: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeCandidate: {
    (host: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      host: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      host: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      host: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface CandidateInstance extends Truffle.ContractInstance {
  addCandidate: {
    (
      host: string | BN,
      guest: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      host: string | BN,
      guest: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      host: string | BN,
      guest: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      host: string | BN,
      guest: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeCandidate: {
    (host: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      host: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      host: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      host: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createCandidatesValidatorsProposal: {
    (hosts: (string | BN)[], txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      hosts: (string | BN)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      hosts: (string | BN)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      hosts: (string | BN)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getValidatorsListByProposalID(
    proposalID: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<(string)[]>;

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  isCandidateExists(
    host: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getGuestAddress(
    host: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface DaoInstance extends Truffle.ContractInstance {
  createProposal: {
    (
      parameters: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      parameters: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      parameters: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      parameters: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  approvedNewProposal: {
    (proposalID: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      proposalID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      proposalID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      proposalID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (_limits: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _limits: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _limits: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _limits: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  _getFirstMessageIDByAddress(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface ERC20MockInstance extends Truffle.ContractInstance {
  allowance(
    owner: string | BN,
    spender: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  approve: {
    (
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  decreaseAllowance: {
    (
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      subtractedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  increaseAllowance: {
    (
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      addedValue: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  transfer: {
    (
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  mint: {
    (
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burn: {
    (
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  burnFrom: {
    (
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      account: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferInternal: {
    (
      from: string | BN,
      to: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      from: string | BN,
      to: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      from: string | BN,
      to: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string | BN,
      to: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  approveInternal: {
    (
      owner: string | BN,
      spender: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      owner: string | BN,
      spender: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      owner: string | BN,
      spender: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      owner: string | BN,
      spender: string | BN,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ICandidateInstance extends Truffle.ContractInstance {
  addCandidate: {
    (
      host: string | BN,
      guest: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      host: string | BN,
      guest: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      host: string | BN,
      guest: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      host: string | BN,
      guest: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeCandidate: {
    (host: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      host: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      host: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      host: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createCandidatesValidatorsProposal: {
    (hosts: (string | BN)[], txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      hosts: (string | BN)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      hosts: (string | BN)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      hosts: (string | BN)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getValidatorsListByProposalID(
    proposalID: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<(string)[]>;

  isCandidateExists(
    host: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getGuestAddress(
    host: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface IDaoInstance extends Truffle.ContractInstance {
  createProposal: {
    (
      parameters: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      parameters: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      parameters: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      parameters: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  approvedNewProposal: {
    (proposalID: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      proposalID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      proposalID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      proposalID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface IERC20Instance extends Truffle.ContractInstance {
  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  balanceOf(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  transfer: {
    (
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowance(
    owner: string | BN,
    spender: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  approve: {
    (
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      recipient: string | BN,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface ILimitsInstance extends Truffle.ContractInstance {
  setLimits: {
    (
      minHostTransactionValue: number | BN | string,
      maxHostTransactionValue: number | BN | string,
      dayHostMaxLimit: number | BN | string,
      dayHostMaxLimitForOneAddress: number | BN | string,
      maxHostPendingTransactionLimit: number | BN | string,
      minGuestTransactionValue: number | BN | string,
      maxGuestTransactionValue: number | BN | string,
      dayGuestMaxLimit: number | BN | string,
      dayGuestMaxLimitForOneAddress: number | BN | string,
      maxGuestPendingTransactionLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      minHostTransactionValue: number | BN | string,
      maxHostTransactionValue: number | BN | string,
      dayHostMaxLimit: number | BN | string,
      dayHostMaxLimitForOneAddress: number | BN | string,
      maxHostPendingTransactionLimit: number | BN | string,
      minGuestTransactionValue: number | BN | string,
      maxGuestTransactionValue: number | BN | string,
      dayGuestMaxLimit: number | BN | string,
      dayGuestMaxLimitForOneAddress: number | BN | string,
      maxGuestPendingTransactionLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      minHostTransactionValue: number | BN | string,
      maxHostTransactionValue: number | BN | string,
      dayHostMaxLimit: number | BN | string,
      dayHostMaxLimitForOneAddress: number | BN | string,
      maxHostPendingTransactionLimit: number | BN | string,
      minGuestTransactionValue: number | BN | string,
      maxGuestTransactionValue: number | BN | string,
      dayGuestMaxLimit: number | BN | string,
      dayGuestMaxLimitForOneAddress: number | BN | string,
      maxGuestPendingTransactionLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      minHostTransactionValue: number | BN | string,
      maxHostTransactionValue: number | BN | string,
      dayHostMaxLimit: number | BN | string,
      dayHostMaxLimitForOneAddress: number | BN | string,
      maxHostPendingTransactionLimit: number | BN | string,
      minGuestTransactionValue: number | BN | string,
      maxGuestTransactionValue: number | BN | string,
      dayGuestMaxLimit: number | BN | string,
      dayGuestMaxLimitForOneAddress: number | BN | string,
      maxGuestPendingTransactionLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getLimits(txDetails?: Truffle.TransactionDetails): Promise<(BN)[]>;
}

export interface IStatusInstance extends Truffle.ContractInstance {
  pauseBridgeByVolume: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  resumeBridgeByVolume: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  pausedByBridgeVolumeForAddress: {
    (sender: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  resumedByBridgeVolumeForAddress: {
    (sender: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setPausedStatusForGuestAddress: {
    (sender: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setResumedStatusForGuestAddress: {
    (sender: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  startBridge: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  resumeBridge: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  stopBridge: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  pauseBridge: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  getStatusBridge(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getStatusForAccount(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isPausedByBridgVolume(
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface ITransfersInstance extends Truffle.ContractInstance {
  setTransfer: {
    (
      amount: number | BN | string,
      owner: string | BN,
      guestAddress: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BN | string,
      owner: string | BN,
      guestAddress: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      owner: string | BN,
      guestAddress: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      owner: string | BN,
      guestAddress: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  revertTransfer: {
    (messageID: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      messageID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      messageID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      messageID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  approveTransfer: {
    (
      messageID: string | BN,
      spender: string | BN,
      guestAddress: string | BN,
      availableAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      messageID: string | BN,
      spender: string | BN,
      guestAddress: string | BN,
      availableAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      messageID: string | BN,
      spender: string | BN,
      guestAddress: string | BN,
      availableAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      messageID: string | BN,
      spender: string | BN,
      guestAddress: string | BN,
      availableAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  confirmTransfer: {
    (messageID: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      messageID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      messageID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      messageID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawTransfer: {
    (
      messageID: string | BN,
      sender: string | BN,
      recipient: string | BN,
      availableAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      messageID: string | BN,
      sender: string | BN,
      recipient: string | BN,
      availableAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      messageID: string | BN,
      sender: string | BN,
      recipient: string | BN,
      availableAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      messageID: string | BN,
      sender: string | BN,
      recipient: string | BN,
      availableAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  confirmWithdrawTransfer: {
    (messageID: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      messageID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      messageID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      messageID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  confirmCancelTransfer: {
    (messageID: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      messageID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      messageID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      messageID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getMessageStatus(
    messageID: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  isExistsMessage(
    messageID: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getHost(
    messageID: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getGuest(
    messageID: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getAvailableAmount(
    messageID: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;
}

export interface LimitsInstance extends Truffle.ContractInstance {
  parameters(
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN, BN, BN, BN, BN, BN, BN, BN]>;

  setLimits: {
    (
      minHostTransactionValue: number | BN | string,
      maxHostTransactionValue: number | BN | string,
      dayHostMaxLimit: number | BN | string,
      dayHostMaxLimitForOneAddress: number | BN | string,
      maxHostPendingTransactionLimit: number | BN | string,
      minGuestTransactionValue: number | BN | string,
      maxGuestTransactionValue: number | BN | string,
      dayGuestMaxLimit: number | BN | string,
      dayGuestMaxLimitForOneAddress: number | BN | string,
      maxGuestPendingTransactionLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      minHostTransactionValue: number | BN | string,
      maxHostTransactionValue: number | BN | string,
      dayHostMaxLimit: number | BN | string,
      dayHostMaxLimitForOneAddress: number | BN | string,
      maxHostPendingTransactionLimit: number | BN | string,
      minGuestTransactionValue: number | BN | string,
      maxGuestTransactionValue: number | BN | string,
      dayGuestMaxLimit: number | BN | string,
      dayGuestMaxLimitForOneAddress: number | BN | string,
      maxGuestPendingTransactionLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      minHostTransactionValue: number | BN | string,
      maxHostTransactionValue: number | BN | string,
      dayHostMaxLimit: number | BN | string,
      dayHostMaxLimitForOneAddress: number | BN | string,
      maxHostPendingTransactionLimit: number | BN | string,
      minGuestTransactionValue: number | BN | string,
      maxGuestTransactionValue: number | BN | string,
      dayGuestMaxLimit: number | BN | string,
      dayGuestMaxLimitForOneAddress: number | BN | string,
      maxGuestPendingTransactionLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      minHostTransactionValue: number | BN | string,
      maxHostTransactionValue: number | BN | string,
      dayHostMaxLimit: number | BN | string,
      dayHostMaxLimitForOneAddress: number | BN | string,
      maxHostPendingTransactionLimit: number | BN | string,
      minGuestTransactionValue: number | BN | string,
      maxGuestTransactionValue: number | BN | string,
      dayGuestMaxLimit: number | BN | string,
      dayGuestMaxLimitForOneAddress: number | BN | string,
      maxGuestPendingTransactionLimit: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getLimits(txDetails?: Truffle.TransactionDetails): Promise<(BN)[]>;

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };
}

export interface MigrationsInstance extends Truffle.ContractInstance {
  last_completed_migration(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  setCompleted: {
    (
      completed: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      completed: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      completed: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      completed: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  upgrade: {
    (new_address: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      new_address: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      new_address: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      new_address: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}

export interface StatusInstance extends Truffle.ContractInstance {
  pauseBridgeByVolumeBool(
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  pauseBridgeByVolume: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  resumeBridgeByVolume: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  pausedByBridgeVolumeForAddress: {
    (sender: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  resumedByBridgeVolumeForAddress: {
    (sender: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setPausedStatusForGuestAddress: {
    (sender: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setResumedStatusForGuestAddress: {
    (sender: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      sender: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  startBridge: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  resumeBridge: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  stopBridge: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  pauseBridge: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  getStatusBridge(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getStatusForAccount(
    account: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  initialize: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  isPausedByBridgVolume(
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;
}

export interface TestDateTimeInstance extends Truffle.ContractInstance {
  nextYear(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  test: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  timestampFromDate(
    year: number | BN | string,
    month: number | BN | string,
    day: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  timestampFromDateTime(
    year: number | BN | string,
    month: number | BN | string,
    day: number | BN | string,
    hour: number | BN | string,
    minute: number | BN | string,
    second: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  timestampToDate(
    timestamp: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN]>;

  timestampToDateTime(
    timestamp: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN, BN, BN, BN, BN]>;

  isLeapYear(
    timestamp: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  _isLeapYear(
    year: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isWeekDay(
    timestamp: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isWeekEnd(
    timestamp: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getDaysInMonth(
    timestamp: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  _getDaysInMonth(
    year: number | BN | string,
    month: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getDayOfWeek(
    timestamp: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  isValidDate(
    year: number | BN | string,
    month: number | BN | string,
    day: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  isValidDateTime(
    year: number | BN | string,
    month: number | BN | string,
    day: number | BN | string,
    hour: number | BN | string,
    minute: number | BN | string,
    second: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getYear(
    timestamp: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getMonth(
    timestamp: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getDay(
    timestamp: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getHour(
    timestamp: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getMinute(
    timestamp: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getSecond(
    timestamp: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  addYears(
    timestamp: number | BN | string,
    _years: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  addMonths(
    timestamp: number | BN | string,
    _months: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  addDays(
    timestamp: number | BN | string,
    _days: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  addHours(
    timestamp: number | BN | string,
    _hours: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  addMinutes(
    timestamp: number | BN | string,
    _minutes: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  addSeconds(
    timestamp: number | BN | string,
    _seconds: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  subYears(
    timestamp: number | BN | string,
    _years: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  subMonths(
    timestamp: number | BN | string,
    _months: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  subDays(
    timestamp: number | BN | string,
    _days: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  subHours(
    timestamp: number | BN | string,
    _hours: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  subMinutes(
    timestamp: number | BN | string,
    _minutes: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  subSeconds(
    timestamp: number | BN | string,
    _seconds: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  diffYears(
    fromTimestamp: number | BN | string,
    toTimestamp: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  diffMonths(
    fromTimestamp: number | BN | string,
    toTimestamp: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  diffDays(
    fromTimestamp: number | BN | string,
    toTimestamp: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  diffHours(
    fromTimestamp: number | BN | string,
    toTimestamp: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  diffMinutes(
    fromTimestamp: number | BN | string,
    toTimestamp: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  diffSeconds(
    fromTimestamp: number | BN | string,
    toTimestamp: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;
}

export interface TransfersInstance extends Truffle.ContractInstance {
  setTransfer: {
    (
      amount: number | BN | string,
      owner: string | BN,
      guestAddress: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      amount: number | BN | string,
      owner: string | BN,
      guestAddress: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amount: number | BN | string,
      owner: string | BN,
      guestAddress: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      owner: string | BN,
      guestAddress: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  revertTransfer: {
    (messageID: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      messageID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      messageID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      messageID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  approveTransfer: {
    (
      messageID: string | BN,
      spender: string | BN,
      guestAddress: string | BN,
      availableAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      messageID: string | BN,
      spender: string | BN,
      guestAddress: string | BN,
      availableAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      messageID: string | BN,
      spender: string | BN,
      guestAddress: string | BN,
      availableAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      messageID: string | BN,
      spender: string | BN,
      guestAddress: string | BN,
      availableAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  confirmTransfer: {
    (messageID: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      messageID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      messageID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      messageID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawTransfer: {
    (
      messageID: string | BN,
      sender: string | BN,
      recipient: string | BN,
      availableAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      messageID: string | BN,
      sender: string | BN,
      recipient: string | BN,
      availableAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      messageID: string | BN,
      sender: string | BN,
      recipient: string | BN,
      availableAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      messageID: string | BN,
      sender: string | BN,
      recipient: string | BN,
      availableAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  confirmWithdrawTransfer: {
    (messageID: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      messageID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      messageID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      messageID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  confirmCancelTransfer: {
    (messageID: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      messageID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      messageID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      messageID: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (_token: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      _token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getMessageStatus(
    messageID: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  isExistsMessage(
    messageID: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  getHost(
    messageID: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getGuest(
    messageID: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getAvailableAmount(
    messageID: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  _getFirstMessageIDByAddress(
    sender: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;
}

export interface ValidatorsOperationsInstance extends Truffle.ContractInstance {
  allOperations(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  allOperationsIndicies(
    arg0: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  howManyValidatorsDecide(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  validators(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  validatorsGeneration(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  validatorsIndices(
    arg0: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  votesCountByOperation(
    arg0: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  votesMaskByOperation(
    arg0: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  init: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  cancelPending: {
    (operation: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      operation: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      operation: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      operation: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  changeValidators: {
    (
      newValidators: (string | BN)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newValidators: (string | BN)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newValidators: (string | BN)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newValidators: (string | BN)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  changeValidatorsWithHowMany: {
    (
      newValidators: (string | BN)[],
      newHowManyValidatorsDecide: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newValidators: (string | BN)[],
      newHowManyValidatorsDecide: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newValidators: (string | BN)[],
      newHowManyValidatorsDecide: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newValidators: (string | BN)[],
      newHowManyValidatorsDecide: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  cancelAllPending: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  isExistValidator(
    wallet: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  validatorsCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  allOperationsCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;
}

export interface ValidatorsOperationsMockInstance
  extends Truffle.ContractInstance {
  allOperations(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  allOperationsCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  allOperationsIndicies(
    arg0: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  cancelAllPending: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  cancelPending: {
    (operation: string | BN, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(
      operation: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      operation: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      operation: string | BN,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  changeValidators: {
    (
      newValidators: (string | BN)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newValidators: (string | BN)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newValidators: (string | BN)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newValidators: (string | BN)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  changeValidatorsWithHowMany: {
    (
      newValidators: (string | BN)[],
      newHowManyValidatorsDecide: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      newValidators: (string | BN)[],
      newHowManyValidatorsDecide: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newValidators: (string | BN)[],
      newHowManyValidatorsDecide: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newValidators: (string | BN)[],
      newHowManyValidatorsDecide: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  howManyValidatorsDecide(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  isExistValidator(
    wallet: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  validators(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  validatorsCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  validatorsGeneration(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  validatorsIndices(
    arg0: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  value(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  votesCountByOperation(
    arg0: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  votesMaskByOperation(
    arg0: string | BN,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  init: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setValue: {
    (
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setValueAny: {
    (
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setValueAll: {
    (
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setValueSome: {
    (
      _value: number | BN | string,
      howMany: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _value: number | BN | string,
      howMany: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BN | string,
      howMany: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BN | string,
      howMany: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  nestedFirst: {
    (
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  nestedSecond: {
    (
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  nestedFirstAllToAll: {
    (
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  nestedFirstAllToAll2: {
    (
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  nestedSecondAllToAll: {
    (
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  nestedFirstAnyToAny: {
    (
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  nestedFirstAnyToAny2: {
    (
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  nestedSecondAnyToAny: {
    (
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  nestedFirstManyToSome: {
    (
      _value: number | BN | string,
      howMany: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _value: number | BN | string,
      howMany: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BN | string,
      howMany: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BN | string,
      howMany: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  nestedFirstAnyToSome: {
    (
      _value: number | BN | string,
      howMany: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _value: number | BN | string,
      howMany: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BN | string,
      howMany: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BN | string,
      howMany: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  nestedSecondSome: {
    (
      _value: number | BN | string,
      howMany: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse>;
    call(
      _value: number | BN | string,
      howMany: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _value: number | BN | string,
      howMany: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _value: number | BN | string,
      howMany: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };
}
